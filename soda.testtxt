
For the first test, we ran with an edge case we discovered. If everything is 1, specifically the number of machines, our truck would run in an infinite loop, which resulted in nothing finishing. The reason was that the next machine was also the last machine serviced, so it would never go into the delivery part of the routine. 
Script started on Fri 28 Nov 2014 07:10:07 PM EST
1%>ubuntu1204-006:~/343 Project/A6> make soda
make: `soda' is up to date.
1%>ubuntu1204-006:~/343 Project/A6> cat 1soda.config
SodaCost                1    # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents             1    # number of students to create
MaxPurchases            1    # maximum number of bottles a student purchases
NumVendingMachines      1    # number of vending machines
MaxStockPerFlavour      1    # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour    1    # maximum number of bottles of each flavour generated by the bottling
                            #    plant per production run
TimeBetweenShipments    1    # length of time between shipment pickup
ParentalDelay           1    # length of time between new deposits of funds
NumCouriers             1    # maximum number of couriers in the pool
1%>ubuntu1204-006:~/343 Project/A6> ./soda 1soda.config 5
Parent  WATOff  Names   Truck   Plant   Stud0   Mach0   Cour0   
******* ******* ******* ******* ******* ******* ******* ******* 
S   S   S                       
D0,2        R0                  S   
D0,1        N0,0        S   S1,1    S1      
D0,3    C0,5            G0  V0          
D0,2            S               t0,5    
D0,3    W                       T0,5    
D0,3                                
D0,2                                
D0,1        N0,0            V0          
D0,3                                
D0,3                                
D0,1            P0                  
            d0,0                    
D0,2            U0,1    P       r       
D0,1            D0,0    G3              
D0,3                        R       
D0,1                                
D0,1                                
D0,2        N0,0    P3      V0          
D0,2            d0,3    P               
D0,1                G4              
D0,1                        r       
D0,2            D0,0                    
D0,2                        R       
D0,1                                
D0,1                        B1,0        
D0,1            P4                  
            d0,4        B4          
... ... ... ... ... F   ... ... 
D0,1                P               
D0,1                G3              
D0,3                        r       
D0,3            D0,2                    
D0,1                        R       
D0,2                                
D0,1                                
D0,2                                
D0,1                                
... ... ... F   ... ... ... ... 
D0,3                                
... ... ... ... F   ... ... ... 
D0,1                                
D0,3                                
... ... ... ... ... ... F   ... 
D0,3                                
D0,3                                
... ... F   ... ... ... ... ... 
D0,2                                
D0,1                                
... F   ... ... ... ... ... ... 
D0,1                                
... ... ... ... ... ... ... F   
D0,2                                
D0,1                                
D0,3                                
F   ... ... ... ... ... ... ... 
***********************
1%>ubuntu1204-006:~/343 Project/A6> exit
exit
Script done on Fri 28 Nov 2014 07:10:25 PM EST

For the second test, we just ran it with some normal values (default ones given to us) to see if the output actually made sense. We wanted to see that the values printed were correct based on the actions of other tasks. As we can see, whenever there is an action that is involved with two tasks, both print appropriate messages.

Script started on Fri 28 Nov 2014 07:12:02 PM EST
1%>ubuntu1204-006:~/343 Project/A6> make soda
make: `soda' is up to date.
1%>ubuntu1204-006:~/343 Project/A6> cat soda.config
SodaCost                2    # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents             2    # number of students to create
MaxPurchases            8    # maximum number of bottles a student purchases
NumVendingMachines      3    # number of vending machines
MaxStockPerFlavour      5    # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour    3    # maximum number of bottles of each flavour generated by the bottling
                             #    plant per production run
TimeBetweenShipments    3    # length of time between shipment pickup
ParentalDelay           2    # length of time between new deposits of funds
NumCouriers             1    # maximum number of couriers in the pool1%>ubuntu1204-006:~/343 Project/A6> 
1%>ubuntu1204-006:~/343 Project/A6> ./soda soda.config 5
Parent  WATOff  Names   Truck   Plant   Stud0   Stud1   Mach0   Mach1   Mach2   Cour0   
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* 
S   S   S                               S   
D1,2        R0                  S2              
D0,1        R1                      S2          
D0,3        R2      S   S1,2                S2      
D1,3    C0,5    N0,0            V0  S0,1                    
D0,1    W   N1,1    S   G2      V1              t0,5    
D0,3    C1,5                                    T0,5    
                                        t1,5    
D0,1    W   N0,1            V1                  T1,5    
D0,2            P2                              
            d1,2                                
D1,1            U1,13   P               r           
D0,2            D1,0    G7              R           
D0,2        N1,2                V2                  
D1,3        N0,2            V2                      
D1,3                                            
D1,2            P7                              
            d2,7                                
D1,2            U2,8    P                   r       
D0,1            D2,0    G8                  R       
D1,1                        B3          B0,2        
... ... ... ... ... ... F   ... ... ... ... 
            P8                              
            d0,8                                
D1,2            U0,7    P           r               
D1,2            D0,0    G7  B3      R       B1,1        
D0,1            P7                              
            d1,7                                
D1,3            U1,6    P               r           
D0,2            D1,0        B1          R   B1,0        
... ... ... ... ... F   ... ... ... ... ... 
D1,2                G11                         
D0,1                                            
D1,1                                            
... ... ... F   ... ... ... ... ... ... ... 
D0,1                                            
... ... ... ... F   ... ... ... ... ... ... 
D0,1                                            
... ... ... ... ... ... ... F   ... ... ... 
D1,3                                            
... ... ... ... ... ... ... ... F   ... ... 
D1,1                                            
... ... ... ... ... ... ... ... ... F   ... 
D0,2                                            
... ... F   ... ... ... ... ... ... ... ... 
D1,2                                            
... F   ... ... ... ... ... ... ... ... ... 
                                            
... ... ... ... ... ... ... ... ... ... F   
D0,3                                            
D0,1                                            
F   ... ... ... ... ... ... ... ... ... ... 
***********************
1%>ubuntu1204-006:~/343 Project/A6> exit
exit

For our final bit of testing, we simply brute force tested it. We set up a bash script (pasted below) that goes from 1 to 100 for each of the attributes in the soda config file with a seed from 1 to 100. We have it set to save the output if the execution returns an error. This is simply to see if it does deadlock on anything. We also ran the default config file using another bash script which goes from seeds 1 to 10,000 to see if it deadlocks on any of the seeds.

Script done on Fri 28 Nov 2014 07:12:26 PM EST
#!/bin/bash

config="test.config"

for h in $(seq 1 100) 
    do
    for i in $(seq 1 100) 
        do
        for j in $(seq 1 100) 
            do
            for k in $(seq 1 100) 
                do
                for l in $(seq 1 100) 
                    do
                    for m in $(seq 1 100) 
                        do
                        for n in $(seq 1 100) 
                            do
                            for o in $(seq 1 100) 
                                do
                                for p in $(seq 1 100) 
                                    do
                                    for q in $(seq 1 100) 
                                        do
                                        rm $config
                                        echo "SodaCost $p" >> $config
                                        echo "NumStudents $o" >> $config
                                        echo "MaxPurchases $n" >> $config
                                        echo "NumVendingMachines $m" >> $config
                                        echo "MaxStockPerFlavour $l" >> $config
                                        echo "MaxShippedPerFlavour $k" >> $config
                                        echo "TimeBetweenShipments $j" >> $config
                                        echo "ParentalDelay $i" >> $config
                                        echo "NumCouriers $h" >> $config
                                        echo "$p, $o, $n, $m, $l, $k, $j, $i, $h, Seed: $q"
                                        out="./out/$p $o $n $m $l $k $j $i $h S$q.out"
                                        ./soda "$config" $q > "$out"
                                        if [ $? -eq 0 ]; then
                                            rm "$out"
                                        fi
                                    done
                                done
                            done
                        done
                    done
                done
            done
        done
    done
done
